function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 29-Dec-2021 11:25:21.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx6 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;-348.362091064453];
x1_step1.gain = [0.1;0.222222222222222;0.5;0.333333333333333;0.666666666666667;0.00427667997266909];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.29530453398711875579;-0.25865884685602302806;-0.12568340159191224159;-0.0064291185802067742777;-0.20168434944777616225];
IW1_1 = [0.018479165757683515409 0.44047773204747636688 -0.9863551530624189434 -0.42909619138308191522 -0.42877480743866386304 0.45389896790873413002;-0.47457622547187922057 0.89070036512692107866 0.31681294274957511048 0.40736134530574374946 -0.61210935869911120566 0.20990920503389520757;0.52151996070271666728 -0.1914211308902582509 -0.43168036606683191092 0.20616128353196588874 0.072200750792541720791 0.98640778680909368958;0.34408517784540637585 -0.004183517841138750977 -0.77362921400331974287 -0.16152971558699774635 -0.50744741225916489835 0.1997588682486030609;-0.72991566702938481814 0.47150761050750972236 0.49878925059063317082 -0.14913611775325016917 -0.28392394049126001843 0.18975879531119599353];

% Layer 2
b2 = -0.15751362550762715298;
LW2_1 = [0.61538876329202607529 -0.22577128727528730789 0.91575847330404180902 -0.40909548741539447647 0.77133531904492058651];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00446627958910228;
y1_step1.xoffset = -321.3;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
